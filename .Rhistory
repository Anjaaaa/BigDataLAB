source('~/OwnCloud/Uni/Umea/Big Data/LABs/git/BigDataLAB/Task1.R')
?glm
########################################################
# 1.3 Logistic Regression
diagnosis_bin <- array(0, dim=c(1,length(Data$Diagnosis))
########################################################
# 1.3 Logistic Regression
diagnosis_bin <- array(0, dim=c(1,length(Data$Diagnosis)))
########################################################
# 1.3 Logistic Regression
number_of_patients = length(Data$Diagnosis)
########################################################
# 1.3 Logistic Regression
number_of_patients = length(Data$Diagnosis)
diagnosis_bin <- array(0, dim=c(1,number_of_patients))
########################################################
# 1.3 Logistic Regression
number_of_patients = length(Data$Diagnosis)
diagnosis_bin <- array(0, dim=c(1,number_of_patients))
for(i in 1:number_of_patients){
if (Data$Diagnosis[i] == "B"){
diagnosis_bin[i] <- 0
} else {
diagnosis_bin[i] == "M"
}
}
diagnosis_bin
diagnosis_lr <- glm(diagnosis_bin ~ PC_1 + PC_2, data= Data)
source('~/OwnCloud/Uni/Umea/Big Data/LABs/git/BigDataLAB/Task1.R')
length(PC_1)
length(diagnosis_bin)
length(PC_2)
diagnosis_lr
diagnosis_bin
diagnosis_lr <- glm(diagnosis_bin ~ PC_1 + PC_2, link = 'logit', data= Data)
length(Data)
diagnosis_lr <- glm(diagnosis_bin ~ PC_1 + PC_2, link = 'logit', data= t(Data)
diagnosis_lr
diagnosis_lr <- glm(diagnosis_bin ~ PC_1 + PC_2, link = 'logit', data= t(Data))
diagnosis_lr
length(t(Data))
length((Data))
d = t(Data)
d
length(d)
typeof(Data)
dim(Data)
dim(t(Data))
K = t(Data)
dim(K)
length(K)
length(Data$Diagnosis)
Data
diagnosed
diagnosed <- array(0, dim=c(1,length(Data$Diagnosis)))
diagnosed
for(i in 1:number_of_patients){
if (Data$Diagnosis[i] == "B"){
diagnosis_bin[i] <- 0
} else {
diagnosis_bin[i] == "M"
}
}
diagnosed
for(i in 1:length(Data$Diagnosis)){
if (Data$Diagnosis[i] == "B"){
diagnosis_bin[i] <- 0
} else {
diagnosis_bin[i] == "M"
}
}
diagnosed
for(i in 1:length(Data$Diagnosis)){
if (Data$Diagnosis[i] == "B"){
diagnosis_bin[i] <- 0
} else {
diagnosis_bin[i] <- 1
}
}
diagnosed
diagnosis_bin <- array(0, dim=c(1,length(Data$Diagnosis)))
for (i in 1:length(diagnosed)){
if (Data$Diagnosis[i] == "B"){
diagnosis_bin[i] = 0
} else {
diagnosis_bin[i] = 1
}
}
diagnosis_bin
diagnosis_lr <- glm(diagnosis_bin ~ PC_1 + PC_2, link = 'logit', data= t(Data))
diagnosis_lr <- glmdiagnosis_bin ~ PC_1 + PC_2, link = 'logit', data= Data_trans
Data_trans = t(Data)
diagnosis_lr <- glmdiagnosis_bin ~ PC_1 + PC_2, link = 'logit', data= Data_trans
Data_trans = t(Data)
diagnosis_lr <- glmdiagnosis_bin ~ PC_1 + PC_2, link = 'logit', data= Data_trans)
Data_trans = t(Data)
diagnosis_lr <- glm(diagnosis_bin ~ PC_1 + PC_2, link = 'logit', data= Data_trans)
Data_trans = as.data.frame(t(Data))
Data_trans
dim(Data_trans)
length(Data_trans)
diagnosis_lr <- glm(diagnosis_bin ~ PC_1 + PC_2, link = 'logit', data= Data_trans)
PC_1
length(PC_1)
length(PC_2)
length(diagnosis_bin)
length(Data_trans)
diagnosis_lr <- glm(diagnosis_bin ~ PC_1 + PC_2, link = 'logit', data= Data_trans)
diagnosis_lr <- glm(diagnosis_bin ~ PC_1 + PC_2, family=binomial(), data= Data_trans)
source('~/OwnCloud/Uni/Umea/Big Data/LABs/git/BigDataLAB/Task1.R')
diagnosis_lr <- glm(diagnosis_bin ~ ., family=binomial(), data= Data_trans)
diagnosis_lr <- glm(diagnosis_bin ~ ., family=binomial(), data=Data)
diagnosis_lr <- glm(diagnosis_bin ~ ., family=binomial(), data=Data$Diagnosis)
diagnosis_lr <- glm(diagnosis_bin ~ ., family=binomial(), data=Data)
diagnosis_lr <- glm(diagnosis_bin ~ ., family=binomial(), data=Data)
Data_trans = as.data.frame(t(Data))
diagnosis_lr <- glm(diagnosis_bin ~ ., family=binomial(), data=Data)
diagnosis_lr <- glm(diagnosis_bin ~ ., family=binomial(), data=Data_trans)
Data_trans = as.data.frame(t(Data))
diagnosis_lr <- glm(diagnosis_bin ~ PC_1+PC_2, family=binomial(), data=Data)
diagnosis_lr <- glm(diagnosis_bin ~ ., family=binomial(), data=Data_trans)
########################################################
########################################################
# 1) Read data and construct training and test sets
Data = read.table("BreastCancerDataTrain.txt", header=TRUE)
Data
length(Data)
width(Data)
dim(Data)
Data[1,]
Data[,-1]
########################################################
# 1.2 Linear Discriminant Analysis
diagnosis_lda <- lda(Data$Diagnosis ~ PC_1 + PC_2, data=Data[,-1])
diagnosis_lda2 <- lda(Data$Diagnosis ~ PC_1 + PC_2, data=Data, CV=TRUE)
# diagonal of table gives the correctly classified
# the other entries give the wrongly classified
table(diagnosis_lda2$class, Data[,1])
prediction <- predict(diagnosis_lda, Data)$class
########################################################
# 1.3 Logistic regression
diagnosed <- array(0, dim=c(1,length(Data$Diagnosis)))
source('~/OwnCloud/Uni/Umea/Big Data/LABs/LAB2/File.R')
########################################################
# 1.2 Linear Discriminant Analysis
diagnosis_lda <- lda(Data$Diagnosis ~ PC_1 + PC_2, data=Data[,-1])
diagnosis_lda
diagnosis_lda2 <- lda(Data$Diagnosis ~ PC_1 + PC_2, data=Data[,-1], CV=TRUE)
# diagonal of table gives the correctly classified
# the other entries give the wrongly classified
table(diagnosis_lda2$class, Data[,1])
prediction <- predict(diagnosis_lda, Data)$class
prediction
########################################################
# 1.3 Logistic Regression
diagnosis_bin <- array(0, dim=c(1,length(Data$Diagnosis)))
for (i in 1:length(diagnosed)){
if (Data$Diagnosis[i] == "B"){
diagnosis_bin[i] = 0
} else {
diagnosis_bin[i] = 1
}
}
Data_trans = as.data.frame(t(Data))
diagnosis_lr <- glm(diagnosis_bin ~ PC_1+PC_2, family=binomial(), data=Data)
diagnosis_lr <- glm(diagnosis_bin ~ ., family=binomial(), data=Data_trans)
diagnosis_lr2 <- glm(Data$Diagnosis ~ PC_1 + PC_2, data= Data, CV=TRUE)
########################################################
# 1.2 Linear Discriminant Analysis
diagnosis_lda <- lda(Data$Diagnosis ~ PC_1 + PC_2, data=Data[,-1])
diagnosis_lda_alt <- lda(Data$Diagnosis ~ PC_1 + PC_2, data=Data)
diagnosis_lda
diagnosis_lda_alt
PC_1
Data$Diagnosis
########################################################
# 1.2 Linear Discriminant Analysis
diagnosis_lda <- lda(Data$Diagnosis ~ PC_1 + PC_2, data=Data)
diagnosis_lda2 <- lda(Data$Diagnosis ~ PC_1 + PC_2, data=Data, CV=TRUE)
table(diagnosis_lda2$class, Data[,1])
prediction <- predict(diagnosis_lda, Data)$class
diagnosis_bin <- array(0, dim=c(1,length(Data$Diagnosis)))
diagnosis_bin
########################################################
# 1.3 Logistic Regression
diagnosis_bin <- array(0, dim=c(length(Data$Diagnosis),1))
diagnosis_bin
for (i in 1:length(diagnosed)){
if (Data$Diagnosis[i] == "B"){
diagnosis_bin[i] = 0
} else {
diagnosis_bin[i] = 1
}
}
Data_trans = as.data.frame(t(Data))
diagnosis_lr <- glm(diagnosis_bin ~ PC_1+PC_2, family=binomial(), data=Data)
diagnosis_lr <- glm(diagnosis_bin ~ ., family=binomial(), data=Data_trans)
diagnosis_lr
diagnosis_lr <- glm(diagnosis_bin ~ PC_1+PC_2, family=binomial(), data=Data)
diagnosis_lr2 <- glm(Data$Diagnosis ~ PC_1+PC_2, data= Data, CV=TRUE)
diagnosis_lr
diagnosis_lr <- glm(diagnosis_bin ~ PC_1+PC_2, family=binomial, data=Data)
diagnosis_lr
summary(diagnosis_lr)
confint(diagnosis_lr) # 95% CI for the coefficients
exp(coef(diagnosis_lr)) # exponentiated coefficients
exp(confint(diagnosis_lr)) # 95% CI for exponentiated coefficients
predict(diagnosis_lr, type="response") # predicted values
residuals(diagnosis_lr, type="deviance") # residuals
cdplot(diagnosis_bin~x, data=mydata)
cdplot(diagnosis_bin~x, data=Data)
cdplot(diagnosis_bin~PC_1, data=Data)
cdplot(diagnosis_bin~PC_1, data=Data)
cdplot(diagnosis_bin~PC_1+PC_2, data=Data)
cdplot(diagnosis_bin~PC_2, data=Data)
library(MASS)
########################################################
########################################################
# 1) Read data and construct training and test sets
Data = read.table("BreastCancerDataTrain.txt", header=TRUE)
########################################################
########################################################
# 2) First ten PCA-components
PC <- prcomp(Data[,-1])
PC_1 <- PC$x[,1]
PC_2 <- PC$x[,2]
PC_3 <- PC$x[,3]
PC_4 <- PC$x[,4]
PC_5 <- PC$x[,5]
########################################################
# 1.1 Visualization
pdf('pairwisePlot.pdf')
# red is manignent
labels <- (Data$Diagnosis == "M")+1
pairs(~PC_1+PC_2+PC_3+PC_4+PC_5, col=labels)
dev.off()
########################################################
# 1.2 Linear Discriminant Analysis
diagnosis_lda <- lda(Data$Diagnosis ~ PC_1 + PC_2, data=Data)
diagnosis_lda2 <- lda(Data$Diagnosis ~ PC_1 + PC_2, data=Data, CV=TRUE)
# classifier: Maybe we don't need this, becaus the predict
# function can be used with diagnosis_lda...
#classifier_LDA <- function(PC_1, PC_2){
#  coeff = diagnosis_lda$scaling
#  mean = diagnosis_lda$means
#  priorProbs = diagnosis_lda$prior
#  T = coeff[1] * (PC_1-(mean[1]+mean[2])/2) + coeff[2] * (PC_2-(mean[1]+mean[2])/2) - log(priorProbs[1]/priorProbs[2])
#  if (T>0){
#    'M'
#  }else{
#    'B'
#  }
#}
# diagonal of table gives the correctly classified
# the other entries give the wrongly classified
table(diagnosis_lda2$class, Data[,1])
prediction <- predict(diagnosis_lda, Data)$class
########################################################
# 1.3 Logistic Regression
diagnosis_bin <- array(0, dim=c(length(Data$Diagnosis),1))
for (i in 1:length(diagnosed)){
if (Data$Diagnosis[i] == "B"){
diagnosis_bin[i] = 0
} else {
diagnosis_bin[i] = 1
}
}
Data_trans = as.data.frame(t(Data))
diagnosis_lr <- glm(diagnosis_bin ~ PC_1+PC_2, family=binomial, data=Data)
summary(diagnosis_lr) # display results
confint(diagnosis_lr) # 95% CI for the coefficients
exp(coef(diagnosis_lr)) # exponentiated coefficients
exp(confint(diagnosis_lr)) # 95% CI for exponentiated coefficients
predict(diagnosis_lr, type="response") # predicted values
residuals(diagnosis_lr, type="deviance") # residuals
# actual regression
diagnosis_lr <- glm(diagnosis_bin ~ PC_1+PC_2, family=binomial, data=Data)
summary(diagnosis_lr) # display results
anova(diagnosis_lr)
table(diagnosis_lr$class, Data[,1])
table(diagnosis_lr$class, Data)
diagnosis_lr$class
table(diagnosis_lr, Data)
table(diagnosis_lr, Data)
d_prob = predict(diagnosis_lr, Data, type="response")
d_prob
table(d_pred, Data$Diagnosis = "M")
d_pred = rep("M", dim(Data)[1])
d_pred[d_prob>.5] = "B"
table(d_pred, Data$Diagnosis = "M")
table(d_pred, Data$Diagnosis)
summary(diagnosis_lr) # display results
diagnosis_lr$coefficients
diagnosis_lr$coefficients[1]
coeff <- array(0, dim=c(1,length(diagnosis_lr$coefficients)))
coeff <- diagnosis_lr$coefficients
coeff
prob_M = 1 / 1 + exp(-(coeff[1] + PC_1*coeff[2] + PC_2*coeff[3]))
prob_M = 1 / 1 + exp(-(coeff[1] + PC_1*coeff[2] + PC_2*coeff[3]))
prob_M
prob_M = 1 / (1 + exp(-(coeff[1] + PC_1*coeff[2] + PC_2*coeff[3])))
prob_M
prob_M = 1 / (1 + exp(-(coeff[1] + PC_1*coeff[2] + PC_2*coeff[3])))
if (prob_M > .5){
'M'
} else {
'B'
}
prediction
prediction <- predict(diagnosis_lda, Data[1,])$class
prediction <- predict(diagnosis_lda, Data[,1])$class
prediction
prediction <- predict(diagnosis_lda, Data)$class
prediction
# diagonal of table gives the correctly classified
# the other entries give the wrongly classified
table(diagnosis_lda2$class, Data[,1])
prediction <- predict(diagnosis_lda, Data)$class
correct = 0
for (i in 1:length(Data)){
if (prediction[i] == Data$Diagnosis[i]){
correct = correct + 1
}
}
correct
prediction
Data[,1]
prediction <- predict(diagnosis_lda, Data)$class
correct = 0
for (i in 1:length(Data)){
if (prediction[i] == Data$Diagnosis[i]){
correct = correct + 1
}
}
########################################################
# 1.3 Logistic Regression
# get binary data
diagnosis_bin <- array(0, dim=c(length(Data$Diagnosis),1))
for (i in 1:length(diagnosis_bin)){
if (Data$Diagnosis[i] == "B"){
diagnosis_bin[i] = 0
} else {
diagnosis_bin[i] = 1
}
}
# actual regression
diagnosis_lr <- glm(diagnosis_bin ~ PC_1+PC_2, family=binomial, data=Data)
summary(diagnosis_lr) # display results
coeff <- diagnosis_lr$coefficients
prob_M = 1 / (1 + exp(-(coeff[1] + PC_1*coeff[2] + PC_2*coeff[3])))
if (prob_M > .5){
'M'
} else {
'B'
}
correct
# diagonal of table gives the correctly classified
# the other entries give the wrongly classified
table(diagnosis_lda2$class, Data[,1])
correct = 0
for (i in 1:length(Data)){
print(prediction[i], Data$Diagnosis[i])
if (prediction[i] == Data$Diagnosis[i]){
correct = correct + 1
}
}
correct = 0
for (i in 1:length(Data)){
print(prediction[i])
print(Data$Diagnosis[i])
if (prediction[i] == Data$Diagnosis[i]){
correct = correct + 1
}
}
correct = 0
for (i in 1:length(Data)){
print("prediciton")
print(prediction[i])
print("Data")
print(Data$Diagnosis[i])
if (prediction[i] == Data$Diagnosis[i]){
correct = correct + 1
}
}
correct = 0
for (i in 1:length(as.data.frame(t(Data)))){
print(i)
print("prediciton")
print(prediction[i])
print("Data")
print(Data$Diagnosis[i])
if (prediction[i] == Data$Diagnosis[i]){
correct = correct + 1
}
}
correct
# diagonal of table gives the correctly classified
# the other entries give the wrongly classified
table(diagnosis_lda2$class, Data[,1])
# classifier
coeff <- diagnosis_lr$coefficients
prob_M = 1 / (1 + exp(-(coeff[1] + PC_1*coeff[2] + PC_2*coeff[3])))
pred_M <- array(0, dim=c(1,length(prob_M)))
for (i in 1:length(prob_M))
if (prob_M[i] > .5){
pred_M[i] = 'M'
} else {
pred_M[i] ='B'
}
# calculates the correctly classified patients
correct = 0
for (i in 1:length(as.data.frame(t(Data)))){
if (pred_M[i] == Data$Diagnosis[i]){
correct = correct + 1
}
}
correct
# classifier
coeff <- diagnosis_lr$coefficients
prob_M = 1 / (1 + exp(-(coeff[1] + PC_1*coeff[2] + PC_2*coeff[3])))
pred_M <- array(0, dim=c(1,length(prob_M)))
for (i in 1:length(prob_M))
if (prob_M[i] >= .5){
pred_M[i] = 'M'
} else {
pred_M[i] ='B'
}
# calculates the correctly classified patients
correct = 0
for (i in 1:length(as.data.frame(t(Data)))){
if (pred_M[i] == Data$Diagnosis[i]){
correct = correct + 1
}
}
correct
correct
?knn
source('~/OwnCloud/Uni/Umea/Big Data/LABs/git/BigDataLAB/Task1.R')
source('~/OwnCloud/Uni/Umea/Big Data/LABs/git/BigDataLAB/Task1.R')
summary(tuning)
setwd("~/OwnCloud/Uni/Umea/Big Data/LABs/git/BigDataLAB")
source('~/OwnCloud/Uni/Umea/Big Data/LABs/git/BigDataLAB/Task1.R')
tuning = tune.knn(Data[,-1], Data$Diagnosis, k = 1:8)
summary(tuning)
# classifier
classifier_lr <- function(PC1, PC2){
coeff <- diagnosis_lr$coefficients
prob_M = 1 / (1 + exp(-(coeff[1] + PC1*coeff[2] + PC2*coeff[3])))
pred_M <- array(0, dim=c(1,length(prob_M)))
for (i in 1:length(prob_M))
if (prob_M[i] > .5){
pred_M[i] = 'M'
} else {
pred_M[i] ='B'
}
return(pred_M)
}
source('~/OwnCloud/Uni/Umea/Big Data/LABs/git/BigDataLAB/Task1.R')
source('~/OwnCloud/Uni/Umea/Big Data/LABs/git/BigDataLAB/Task1.R')
